# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Apollo Sphinx
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Sphinx \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-22 16:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:1
msgid "如何使用 Cyber RT 创建新的组件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:3
msgid ""
"Apollo 的 Cyber RT 框架是基于组件概念来构建的。每个组件都是 Cyber RT 框架的一个 特定的算法模块， "
"处理一组输入并产生其输出数椐。"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:6
msgid "要创建并启动一个算法组件，需要通过以下 4 个步骤："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:8
msgid "初如化组件的目录结构"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:9
#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:28
msgid "实现组件类"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:10
#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:105
msgid "设置配置文件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:11
msgid "启动组件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:13
msgid ""
"下面的例子展示了如何创建、编译和运行一个组件。想更深入地探索 Cyber RT 框架，了解 "
"其各种功能，可参考`cyber/examples/`目录下的更多示例。"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:16
msgid "_Note: 这些例子必须运行在 Apollo Docker 环境内， 且需要通过 Bazel 来编译。_"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:18
msgid "初始化组件的目录结构"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:20
msgid "以`cyber/examples/common_component_example/`目录下的样例程序为例："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:22
msgid "C++头文件: common_component_example.h"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:23
msgid "C++源文件: common_component_example.cc"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:24
msgid "Bazel 构建文件: BUILD"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:25
msgid "DAG 文件: common.dag"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:26
msgid "Launch 文件: common.launch"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:30
msgid "头文件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:32
msgid "如何实现`common_component_example.h`:"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:34
msgid "继承 Component 类"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:35
msgid "定义自己的 `Init` 和 `Proc` 函数。Proc 需要指定输入数椐类型。"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:36
msgid "使用`CYBER_REGISTER_COMPONENT`宏定义把组件类注册成全局可用。"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:57
msgid "源文件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:59
msgid "对于源文件 `common_component_example.cc`, `Init` 和 `Proc` 这两个函数需要实现。"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:77
msgid "创建 BUILD 文件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:107
msgid "配置 DAG 文件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:109
msgid "在 DAG 依赖配置文件 （例如 common.dag) 中配置如下项："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:111
msgid "Channel names: 输入 Channel 的名称"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:112
msgid "Library path: 该组件生成的共享库路径"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:113
msgid "Class name: 此组件类的名称"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:134
msgid "配置 Launch 启动文件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:136
msgid "在 launch 启动文件中 (`common.launch`), 配置下面的项："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:138
msgid "组件的名字"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:139
msgid "上一步配置的 DAG 文件路径"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:140
msgid "运行组件时的进程名"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:152
msgid "启动这个组件"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:154
msgid "通过下面的命令来编译组件："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:161
msgid "然后配置环境："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:169
msgid "有两种方法来启动组件："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:171
msgid "使用 Launch 文件启动（推荐）"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:177
msgid "使用 DAG 文件启动"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:183
msgid "提供通道数据给组件处理"
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:185
msgid "打开另一终端, 运行："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:193
msgid "再打开一个终端并运行："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:201
msgid "这时，如果成功，你会看到第一个终端有如下的输出："
msgstr ""

#: ../../docs/cyber/CyberRT_Quick_Start_cn.md:209
msgid "此即验证第一个样例组件已经跑通。"
msgstr ""

