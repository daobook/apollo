# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Apollo Sphinx
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Sphinx \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-22 16:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:1
msgid "How to add a new Lidar driver"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:3
msgid "Introduction"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:5
msgid ""
"Lidar is a commonly used environment-aware sensor. Lidar uses pulsed "
"laser to illuminate a target, receives the reflected pulse from the "
"target, then calculates the distance to the target based on the time of "
"laser return. Differences in multiple measurements can then be used to "
"make digital 3-D representations of the environment."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:7
msgid ""
"As default, Apollo platform support multiple types of Lidar drivers, "
"including 16 channels, 32 channels, 64 channels and 128 channels Velodyne"
" lidars. This manual describes the major functions of Lidar driver and "
"how to add a new lidar driver in Apollo platform."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:9
msgid "What's inside a lidar driver"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:11
msgid ""
"Taking velodyne lidar driver as an example, there are three major "
"components:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:13
msgid ""
"[Driver](../../modules/drivers/lidar/velodyne/driver): Driver receives "
"UDP data packets from lidar sensor, and packages the data packets into a "
"frame of scanning data in the format of VelodyneScan. VelodyneScan is "
"defined in file below:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:18
msgid ""
"[Parser](../../modules/drivers/lidar/velodyne/parser): Parser takes one "
"frame data in format of VelodyneScan as input, converts the cloud points "
"in the frame from spherical coordinate system to Cartesian coordinates "
"system, then sends out the point cloud as output. The pointcloud format "
"is defined in file below:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:23
msgid ""
"[Compensator](../../modules/drivers/lidar/velodyne/compensator): "
"Compensator takes pointcloud data and pose data as inputs. Based on the "
"corresponding pose information for each cloud point, it converts each "
"cloud point information aligned with the latest time in the current lidar"
" scan frame, minimizing the motion error due the movement of the vehicle."
" Thus, each cloud point needs carry its own timestamp information."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:25
msgid "Steps to add a new Lidar driver"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:27
msgid "1. Get familiar with Apollo Cyber RT framework."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:29
msgid "Please refer to the [manuals of Apollo Cyber RT](../cyber/README.md)."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:32
msgid "2. Define message for raw data"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:34
msgid ""
"Apollo already define the format of pointcloud. For new lidar, you only "
"need to define the protobuf message for the raw scannning data. Those raw"
" data will be used for archive and offline development. Compared to "
"processed pointcloud data, raw data saves a lot of storage spaces for "
"long term. The new message of the scan data can be define as below:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:48
msgid ""
"In velodyne driver, the scan data message is define as "
"[VelodyneScan](../../modules/drivers/lidar/velodyne/proto/velodyne.proto#L29)."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:50
msgid "3. Access the raw data"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:52
msgid ""
"Each seconds, Lidar will generate a lot of data, so it relied on UDP to "
"efficiently transport the raw data. You need to create a DriverComponent "
"class, which inherits the Component withotu any parameter. In its Init "
"function, you need to start a async polling thread, whic will receive "
"Lidar data from the specific port. Then depending on the Lidar's "
"frequency, the DriverComponent needs to package all the packets in a fix "
"period into a frame of ScanData. Eventually, the writer will send the "
"ScanData through a corresponding channel."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:85
msgid "4. Parse the scan data, convert to pointcloud"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:87
msgid ""
"If the new lidar driver already provides the pointcloud data in Cartesian"
" coordinates system, then you just need to store those data in the "
"protobuf format defined in Apollo."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:89
msgid ""
"The Parser converts the lidar raw data to the pointcloud format in "
"Cartesian coordinates system. Parser takes ScanData as input. For each "
"cloud point, it will parse the timestamp, x/y/z coordinates and "
"intensity, then packages all the cloudpoint information into a frame of "
"pointcloud. Each cloud point transformed into the FLU (Front: x, Left: y,"
" Up: z）coordinates with Lidar as the origin point."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:101
msgid ""
"Then you need to create a new ParserComponent，which inherits Components "
"templates with ScanData. ParserComponent takes ScanData as input, then "
"generates pointcloud message and sents it out."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:133
msgid "5. Motion compensation for pointcloud"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:135
msgid ""
"Motion compensation is optional depends on lidar hardware design. E.g. if"
" the the pointcloud information from lidar already have the motion error "
"included, then no compensator needed as extra steps. Otherwise, you need "
"your own compensator. However, if each cloud point in your lidar's output"
" carries its own timestamp information, you can probably reuse the "
"current compensator without any changes."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:137
msgid "6. Configure the dag file"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:139
msgid ""
"After done with each component, you just need to configure the DAG config"
" file to add each component into the data processing pipeline. E.g.  "
"lidar_driver.dag:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:179
msgid "7. Run the lidar driver and visualize the pointlcoud output"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:181
msgid ""
"After finishing all the previous steps, you can use the following command"
" to start your new lidar driver."
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_driver.md:186
msgid ""
"To visualize the pointcloud output, you can run `cyber_visualizer` and "
"choose the right channel for the pointcloud."
msgstr ""

