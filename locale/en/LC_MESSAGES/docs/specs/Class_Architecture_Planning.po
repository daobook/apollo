# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Apollo Sphinx
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Sphinx \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-22 16:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../docs/specs/Class_Architecture_Planning.md:1
msgid "Class Architecture and Overview -- Planning Module"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:3
msgid "Data Output and Input"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:5
msgid "Output Data"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:7
msgid "The planning output data is defined in `planning.proto`, as shown below."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:9
msgid "![img](images/class_architecture_planning/image001.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:9
#: ../../docs/specs/Class_Architecture_Planning.md:17
#: ../../docs/specs/Class_Architecture_Planning.md:19
#: ../../docs/specs/Class_Architecture_Planning.md:40
#: ../../docs/specs/Class_Architecture_Planning.md:44
#: ../../docs/specs/Class_Architecture_Planning.md:50
#: ../../docs/specs/Class_Architecture_Planning.md:56
#: ../../docs/specs/Class_Architecture_Planning.md:66
#: ../../docs/specs/Class_Architecture_Planning.md:70
msgid "img"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:11
msgid "*planning.proto*"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:13
msgid ""
"Inside the proto data definition, the planning output includes the total "
"planned time and length, as well as the actual trajectory for control to "
"execute, and is defined in `repeated "
"apollo.common.TrajectoryPointtrajectory_point`."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:15
msgid ""
"A trajectory point is derived from a `path_point`, where speed, "
"acceleration and timing attributes are added. Each `trajectory_point` as "
"defined in `pnc_point.proto`, and contains detailed attributes of the "
"trajectory."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:17
msgid "![img](images/class_architecture_planning/image002.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:19
msgid "![img](images/class_architecture_planning/image003.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:21
msgid ""
"In addition to the trajectory, the planning module also outputs rich "
"annotation information. The important data fields are:"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:23
msgid "Estop"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:24
msgid "DecisionResult"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:25
msgid "Debug information"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:27
msgid ""
"`Estop` is a command that indicates errors and exceptions. For example, "
"when the autonomous vehicle collides with an obstacle or cannot obey "
"traffic rules, estop signals are sent. The `DecisionResult` data is used "
"mainly for simulation display so that developers have a better "
"understanding of the planning results. More detailed numerical "
"intermediate results are stored in the debug information and sent out for"
" debugging purposes."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:29
msgid "Input Data"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:31
msgid ""
"To compute the final published trajectory, the planning module leverages "
"various input data sources. The planning input data sources are:"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:33
msgid "Routing"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:34
msgid "Perception and Prediction"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:35
msgid "Vehicle Status and Localization"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:36
msgid "HD-Map"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:38
msgid ""
"Routing defines the query concept “where I want to go” for the autonomous"
" vehicle, and the message is defined in `routing.proto`. The "
"`RoutingResponse` contains the `RoadSegment`, which identifies the road "
"to follow or the lanes to use to reach the destination as shown below."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:40
msgid "![img](images/class_architecture_planning/image004.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:42
msgid ""
"The messages regarding the query concept  “what is surrounding me” are "
"defined mainly in `perception_obstacles.proto` and "
"`traffic_light_detection.proto`. The `perception_obstacles.proto` defines"
" the obstacles perceived by the perception module around the autonomous "
"vehicle, while `traffic_light_detection` defines the perceived traffic "
"light statuses (if any). In addition to the perceived obstacles, what is "
"important for the planning module are the predicted trajectories for each"
" perceived dynamic obstacle. Therefore, the `prediction.proto` wraps the "
"`perception_obstacle` message with a predicted trajectory, as shown "
"below."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:44
msgid "![img](images/class_architecture_planning/image005.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:46
msgid ""
"Each predicted trajectory has a probability associated with it, and one "
"obstacle might have multiple predicted trajectories."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:48
msgid ""
"In addition to the query concepts “where I want to go” and “what is "
"surrounding me”, another important query concept is “where am I”. Such "
"information is obtained from the HD-Map and Localization modules. Both "
"localization and vehicle chassis information are incorporated in the "
"messages of `VehicleState` that is defined in the `vehicle_state.proto`, "
"as shown below."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:50
msgid "![img](images/class_architecture_planning/image009.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:52
msgid "Code Structure and Class Hierarchy"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:54
msgid ""
"The code is organized as follows: The planning code entrance is the "
"`planning.cc`. Inside the planner, the important class members are shown "
"in the illustration below."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:56
msgid "![img](images/class_architecture_planning/image006.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:58
msgid ""
"The `ReferenceLineInfo` is a wrapper of the `ReferenceLine` class, which "
"represents a smoothed guideline for planning."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:60
msgid ""
"**Frame** contains all the data dependencies including the perceived "
"obstacles with their predicted trajectories, and the current status of "
"the autonomous vehicle."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:62
msgid ""
"**HD-Map** is leveraged as a library inside the planning module for ad-"
"hoc fashioned map queries."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:64
msgid ""
"**EM Planner** does the actual planning and derives from the **Planner** "
"class. Both the Em Planner that is used in the Apollo 2.0 release, and "
"the previously released **RTK Planner** derive from the Planner class."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:66
msgid "![img](images/class_architecture_planning/image007.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:68
msgid ""
"For example, inside a planning cycle performed by the EM Planner, take an"
" iterative approach where three categories of tasks interweave. The "
"relationships of these “**decider/optimizer**” classes are illustrated "
"below."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:70
msgid "![img](images/class_architecture_planning/image008.png)"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:72
msgid "**Deciders** include traffic decider, path decider and speed decider."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:74
msgid "**Path Optimizers** are the DP/QP path optimizers."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md:76
msgid "**Speed Optimizers** are the DP/QP speed optimizers."
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md
msgid "**NOTE:**"
msgstr ""

#: ../../docs/specs/Class_Architecture_Planning.md
msgid ""
"DP means dynamic programming while QP means quadratic programming. After "
"the computation, the final spatio-temporal trajectory is then discretized"
" and published so that the downstream control module is able to execute "
"it."
msgstr ""

