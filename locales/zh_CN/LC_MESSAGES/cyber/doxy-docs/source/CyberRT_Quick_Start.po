# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Apollo Auto
# package.
# xinetzone <735613050@qq.com>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Auto \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-22 19:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: xinetzone <735613050@qq.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:1
msgid "How to Create and Run a new Component in Cyber RT"
msgstr "如何在 Cyber RT 中创建和运行新组件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:3
msgid ""
"Apollo Cyber RT framework is built upon the concept of components. As the"
" building block of Cyber RT, each component is a specific algorithm "
"module which processes a set of inputs and generates its set of outputs."
msgstr ""
"Apollo Cyber RT 框架是基于组件概念来构建的。"
"作为 Cyber RT 的构件，每个组件都是一个特定的算法模块，它处理一组输入并产生其一组输出。"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:7
msgid ""
"To successfully create and launch a new component, there are basically 4 "
"steps:"
msgstr ""
"要成功创建和启动一个新的组件，基本上有 4 个步骤："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:9
msgid "Set up directory layout"
msgstr "建立目录布局"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:10
msgid "Implement the component class"
msgstr "实现组件类"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:11
#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:113
msgid "Configuration setup"
msgstr "设置配置文件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:12
#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:160
#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:182
msgid "Launch the component"
msgstr "启动组件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:14
msgid ""
"The example below demonstrates how to create, build and run a simple "
"component named `CommonComponentExample`. To explore more about Cyber RT,"
" you can find a couple of examples showing different functionalities of "
"Cyber RT under the `cyber/examples` directory."
msgstr ""
"下面的例子演示了如何创建、构建和运行一个名为 `CommonComponentExample` 的简单组件。"
"要探索更多关于 Cyber RT 的信息，你可以在 `cyber/examples` 目录下找到几个展示 Cyber RT 不同功能的例子。"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:19
msgid ""
"**Note**: The examples need to run after successfully built within Apollo"
" Docker container."
msgstr ""
"**注意**：这些例子需要在 Apollo Docker 容器内成功构建后运行。"
#  "**注意**：这些例子必须运行在 Apollo Docker 环境内，且需要通过 Bazel 来编译。"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:22
msgid "Set up directry layout"
msgstr "初始化目录布局"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:24
msgid ""
"Take the sample component under `cyber/examples/common_component_example`"
" for example:"
msgstr ""
"以 `cyber/examples/common_component_example` 下的样例组件为例："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:27
msgid "Header file: common_component_example.h"
msgstr "C++ 头文件：common_component_example.h"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:28
msgid "Source file: common_component_example.cc"
msgstr "C++ 源文件：common_component_example.cc"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:29
msgid "BUILD file: BUILD"
msgstr "Bazel 构建文件：BUILD"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:30
msgid "DAG file: common.dag"
msgstr "DAG 文件：common.dag"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:31
msgid "Launch file: common.launch"
msgstr "Launch 文件：common.launch"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:33
msgid "Implement the sample component class"
msgstr "实现样例组件类"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:35
msgid "Header file"
msgstr "头文件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:37
msgid ""
"In the header file (`common_component_example.h`) for the sample "
"component:"
msgstr ""
"如何实现 `common_component_example.h`："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:39
msgid "Inherit the `Component` base class"
msgstr "继承 `Component` 类"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:40
msgid ""
"Define your own `Init` and `Proc` functions. Please note that for `proc`,"
" input data types need to be specified also."
msgstr ""
"定义自己的 `Init` 和 `Proc` 函数。`proc` 需要指定输入数椐类型。"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:42
msgid ""
"Register the sample component class to be globally visible using the "
"`CYBER_REGISTER_COMPONENT` macro."
msgstr ""
使用 `CYBER_REGISTER_COMPONENT` 宏定义把组件类注册成全局可用。

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:64
msgid "Source File"
msgstr "源文件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:66
msgid ""
"Implement both the `Init` and `Proc` functions in "
"`common_component_example.cc`:"
msgstr ""
"对于源文件 `common_component_example.cc`，需要实现 `Init` 和 `Proc` 这两个函数。"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:84
msgid "BUILD file"
msgstr "创建 BUILD 文件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:115
msgid "DAG file"
msgstr "配置 DAG 文件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:117
msgid ""
"To configure the DAG file (`common.dag` here), specify the following "
"items:"
msgstr ""
"要配置 DAG 文件（此处为 `common.dag`），指定以下项："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:119
msgid "Channel names: for data input and output"
msgstr "Channel names：输入 Channel 的名称"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:120
msgid "Library path: library built from component class"
msgstr "Library path：由组件类建立的库"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:121
msgid "Class name: the class name of the component"
msgstr "Class name：此组件的类名称"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:142
msgid "Launch file"
msgstr "配置 Launch 启动文件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:144
msgid ""
"To configure the launch (`common.launch`) file, specify the following "
"items:"
msgstr ""
"在 launch 启动文件中（`common.launch`），配置下面的项："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:146
msgid "The name of the component"
msgstr "组件的名字"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:147
msgid "The DAG file created in the previous step"
msgstr "上一步配置的 DAG 文件路径"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:148
msgid "The name of the process to run the component"
msgstr "运行组件时的进程名"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:162
msgid "Build"
msgstr "启动这个组件"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:164
msgid "Build the sample component by running the command below:"
msgstr "通过下面的命令来编译组件："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:171
msgid "Environment setup"
msgstr "环境设定"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:173
msgid "Then configure the environment:"
msgstr "然后配置环境："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:184
msgid "You can choose either of the two ways to launch the newly built component:"
msgstr "有两种方法来启动组件："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:186
msgid "Launch with the launch file (recommended)"
msgstr "使用 Launch 文件启动（推荐）"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:192
msgid "Launch with the DAG file"
msgstr "使用 DAG 文件启动"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:198
msgid "_Feed_ channel data for the component to process"
msgstr "_提供_ channel 数据给组件处理"

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:200
msgid "Open another terminal:"
msgstr "打开另一终端，运行："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:208
msgid "Open the 3rd terminal and run:"
msgstr "打开第 3 个终端并运行："

#: ../../cyber/doxy-docs/source/CyberRT_Quick_Start.md:216
msgid "And you should see output from terminal #1 like the following:"
msgstr "这时，如果成功，你会看到第一个终端有如下的输出："
