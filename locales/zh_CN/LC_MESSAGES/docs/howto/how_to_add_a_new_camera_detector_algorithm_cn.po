# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Apollo 文档 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo 文档 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-23 19:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:1
msgid "如何添加新的camera检测算法"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:3
msgid ""
"Perception中的camera数据流如下：     ![camera "
"overview](images/Camera_overview.png)"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:3
msgid "camera overview"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:6
msgid ""
"本篇文档所介绍的camera检测算法分为三种，分别为针对交通信号灯的检测算法，针对车道线的检测算法和针对障碍物的检测算法。这三种检测算法分别位于图中的Traffic_light,"
" Lane和Obstacle三大Component中。各Component的架构如下："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:8
msgid ""
"交通信号灯感知:     ![traffic light "
"component](images/camera_traffic_light_detection.png)"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:8
msgid "traffic light component"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:11
msgid "车道线感知:     ![lane component](images/camera_lane_detection.png)"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:11
msgid "lane component"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:14
msgid "障碍物感知:     ![obstacle component](images/camera_obstacle_detection.png)"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:14
msgid "obstacle component"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:18
msgid ""
"从以上结构中可以清楚地看到,各个component都有自己的抽象类成员 `base_XXX_detector`。对应的检测算法作为 "
"`base_XXX_detector` 的不同的派生类，继承各自的基类实现算法的部署。由于各detector基类在结构上非常相似，下面将以 ` "
"base_obstacle_detector` "
"为例介绍如何基于当前结构添加新的camera障碍物检测算法。新增交通信号灯和车道线检测算法的步骤相同。"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:21
msgid ""
"Apollo在Obstacle Detection中默认提供了3种camera检测算法--"
"Smoke，Yolo和YoloV4，它们可以被轻松更改或替换为不同的算法。每种算法的输入都是经过预处理的图像信息，输出都是目标级障碍物信息。本篇文档将介绍如何引入新的Camera检测算法，添加新算法的步骤如下："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:23
#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:30
msgid "定义一个继承基类 `base_obstacle_detector` 的类"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:24
#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:106
msgid "实现新类 `NewObstacleDetector`"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:25
#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:142
msgid "为新类 `NewObstacleDetector` 配置param的proto文件"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:26
#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:161
msgid "更新config文件使新的算法生效"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:28
msgid "为了更好的理解，下面对每个步骤进行详细的阐述:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:32
msgid "所有的camera检测算法都必须继承基类`base_obstacle_detector`，它定义了一组接口。 以下是检测算法继承基类的示例:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:59
msgid "基类 `base_obstacle_detector` 已定义好各虚函数签名，接口信息如下："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:108
msgid ""
"为了确保新的检测算法能顺利工作，`NewObstacleDetector` 至少需要重写 `base_obstacle_detector` "
"中定义的接口Init(),Detect()和Name()。其中Init()函数负责完成加载配置文件，初始化类成员等工作；而Detect()则负责实现算法的主体流程。一个具体的`NewObstacleDetector.cc`实现示例如下："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:144
msgid "按照下面的步骤添加新camera检测算法的参数信息:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:146
msgid "根据算法要求为新camera检测算法配置param的`proto`文件。当然，如果参数适配，您也可以直接使用现有的`proto`文件，或者对现有`proto`文件进行更改。作为示例，可以参考以下位置的`smoke`的`proto`定义：`modules/perception/camera/lib/obstacle/detector/smoke/proto/smoke.proto`。定义完成后在文件头部输入以下内容："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:155
msgid ""
"参考 `yolo_obstacle_detector` 在目录 "
"`modules/perception/production/data/perception/camera/models/` 中创建 "
"`newobstacledetector` 文件夹，并根据需求创建 `*.pt` 文件："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:163
msgid "要使用Apollo系统中的新camera检测算法，需要根据需求依次对以下config文件进行配置:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:165
msgid ""
"参考如下内容更新 "
"`modules/perception/production/conf/perception/camera/obstacle.pt`文件,将之前步骤中新建的"
" `*.pt` 配置到加载路径中:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:178
msgid ""
"若需要对步骤1中 `detector_param` 的结构更新，或需要新增其他 `_param`，可在 "
"`modules/perception/camera/app/proto/perception.proto` 文件中操作:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:192
msgid ""
"若步骤1中不直接使用 `obstacle.pt` 文件，而使用其他新建的 `*.pt` 文件，则需要更改 "
"`modules/perception/production/conf/perception/camera/fusion_camera_detection_component.pb.txt`."
" 其对应的 `proto` 文件为 "
"`modules/perception/onboard/proto/fusion_camera_detection_component.proto`："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_camera_detector_algorithm_cn.md:199
msgid "在完成以上步骤后，您的新camera检测算法便可在Apollo系统中生效。"
msgstr ""

