# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Apollo Auto
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Auto \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-27 10:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:1
msgid "如何添加新的lidar检测算法"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:3
msgid ""
"Perception中的lidar数据流如下： "
"![](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/lidar_perception_data_flow.png)"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:6
msgid ""
"本篇文档所介绍的lidar检测算法位于图中的Detection Component中。当前Detection Component的架构如下： "
"![lidar detection high-level](images/lidar_detection_1.png) ![lidar "
"detection](images/lidar_detection_2.png)"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:6
msgid "lidar detection high-level"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:6
msgid "lidar detection"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:10
msgid ""
"从以上结构中可以清楚地看到lidar检测算法是位于Detection Component的 "
"`base_lidar_obstacle_detection` 中的抽象成员类 `base_lidar_detector` "
"的派生类。下面将详细介绍如何基于当前结构添加新的lidar检测算法。"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:12
msgid ""
"Apollo默认提供了2种lidar检测算法--"
"PointPillars和CNN（NCut不再维护），可以轻松更改或替换为不同的算法。每种算法的输入都是原始点云信息，输出都是目标级障碍物信息。本篇文档将介绍如何引入新的lidar检测算法，添加新算法的步骤如下："
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:14
#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:21
msgid "定义一个继承基类 `base_lidar_detector` 的类"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:15
#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:92
msgid "实现新类 `NewLidarDetector`"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:16
#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:127
msgid "为新类 `NewLidarDetector` 配置config和param的proto文件"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:17
#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:178
msgid "更新 lidar_obstacle_detection.conf"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:19
msgid "为了更好的理解，下面对每个步骤进行详细的阐述:"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:23
msgid "所有的lidar检测算法都必须继承基类`base_lidar_detector`，它定义了一组接口。 以下是检测算法继承基类的示例:"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:48
msgid "基类 `base_lidar_detector` 已定义好各虚函数签名，接口信息如下："
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:94
msgid "为了确保新的检测算法能顺利工作，`NewLidarDetector`至少需要重写`base_lidar_detector`中定义的接口Init(),Detect()和Name()。其中Init()函数负责完成加载配置文件，初始化类成员等工作；而Detect()则负责实现算法的主体流程。一个具体的`NewLidarDetector.cc`实现示例如下："
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:129
msgid "按照下面的步骤添加新lidar检测算法的配置和参数信息:"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:131
msgid "根据算法要求为新lidar检测算法配置config的`proto`文件。作为示例，可以参考以下位置的`cnn_segmentation`的`proto`定义：`modules/perception/lidar/lib/detector/cnn_segmentation/proto/cnnseg_config.proto`"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:133
msgid "定义新的`proto`之后，例如`newlidardetector_config.proto`，输入以下内容:"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:144
msgid "根据算法要求为新lidar检测算法配置param的`proto`文件。作为示例，可以参考以下位置的`cnn_segmentation`的`proto`定义：`modules/perception/lidar/lib/detector/cnn_segmentation/proto/cnnseg_param.proto`。同样地，在定义完成后输入以下内容："
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:153
msgid ""
"参考如下内容更新 "
"`modules/perception/production/conf/perception/lidar/config_manager.config`文件:"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:159
msgid "参考同级别目录下 `modules/cnnseg.config` 内容创建 `newlidardetector.config`:"
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:172
msgid ""
"参考 `cnnseg` 在目录 "
"`modules/perception/production/data/perception/lidar/models/` 中创建 "
"`newlidardetector` 文件夹，并根据需求创建不同传感器的 `.conf` 文件："
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:180
msgid ""
"要使用Apollo系统中的新lidar检测算法，需要将 "
"`modules/perception/production/data/perception/lidar/models/lidar_obstacle_pipline`"
" 中的对应传感器的 `lidar_obstacle_detection.conf` 文件的 `detector` 字段值改为 "
"\"NewLidarDetector\""
msgstr ""

#: ../../../docs/howto/how_to_add_a_new_lidar_detector_algorithm_cn.md:182
msgid "在完成以上步骤后，您的新lidar检测算法便可在Apollo系统中生效。"
msgstr ""

