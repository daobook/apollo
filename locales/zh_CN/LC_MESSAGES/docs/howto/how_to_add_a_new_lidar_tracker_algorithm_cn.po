# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Apollo 文档 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo 文档 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-23 19:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:1
msgid "如何添加新的lidar匹配算法"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:3
msgid ""
"Perception中的lidar数据流如下： "
"![](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/lidar_perception_data_flow.png)"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:6
msgid ""
"本篇文档所介绍的lidar检测算法位于图中的Recognition Component中。当前Recognition "
"Component的架构如下： ![lidar recognition](images/lidar_recognition.png)"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:6
msgid "lidar recognition"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:9
msgid ""
"从以上结构中可以清楚地看到lidar匹配算法是位于Recognition Component的 "
"`base_lidar_obstacle_tracking` 中的抽象成员类 `base_multi_target_tracker` "
"的派生类。下面将详细介绍如何基于当前结构添加新的lidar匹配算法。"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:11
msgid "Apollo默认的lidar匹配算法为MlfEngine，它可以轻松更改或替换为不同的算法。本篇文档将介绍如何引入新的lidar匹配算法，添加新算法的步骤如下："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:13
#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:20
msgid "定义一个继承基类 `base_multi_target_tracker` 的类"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:14
#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:90
msgid "实现新类 `NewLidarTracker`"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:15
#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:125
msgid "为新类 `NewLidarTracker` 配置config的proto文件"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:16
#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:168
msgid "更新 lidar_obstacle_tracking.conf"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:18
msgid "为了更好的理解，下面对每个步骤进行详细的阐述:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:22
msgid "所有的lidar匹配算法都必须继承基类 `base_multi_target_tracker`，它定义了一组接口。 以下是匹配算法继承基类的示例:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:48
msgid "基类 `base_multi_target_tracker` 已定义好各虚函数签名，接口信息如下："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:92
msgid "为了确保新的匹配算法能顺利工作，`NewLidarTracker`至少需要重写`base_multi_target_tracker`中定义的接口Init(),Track()和Name()。其中Init()函数负责完成加载配置文件，初始化类成员等工作；而Track()则负责实现算法的主体流程。一个具体的`NewLidarTracker.cc`实现示例如下："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:127
msgid "按照下面的步骤添加新lidar匹配算法的配置和参数信息:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:129
msgid "根据算法要求为新lidar匹配算法配置config的`proto`文件。作为示例，可以参考以下位置的`multi_lidar_fusion`的`proto`定义：`modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fustion_config.proto`"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:131
msgid "定义新的`proto`之后，例如`newlidartracker_config.proto`，输入以下内容:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:143
msgid ""
"参考如下内容更新 "
"`modules/perception/production/conf/perception/lidar/config_manager.config`文件:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:149
msgid ""
"参考同级别目录下 `modules/multi_lidar_fusion.config` 内容创建 "
"`newlidartracker.config`:"
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:162
msgid ""
"参考 `multi_lidar_tracker` 在目录 "
"`modules/perception/production/data/perception/lidar/models/` 中创建 "
"`newlidartracker` 文件夹，并根据需求创建不同传感器的 `.conf` 文件："
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:170
msgid ""
"要使用Apollo系统中的新lidar匹配算法，需要将 "
"`modules/perception/production/data/perception/lidar/models/lidar_obstacle_pipline`"
" 中的对应传感器的 `lidar_obstacle_tracking.conf` 文件的 `multi_target_tracker` 字段值改为"
" \"NewLidarTracker\""
msgstr ""

#: ../../docs/howto/how_to_add_a_new_lidar_tracker_algorithm_cn.md:172
msgid "在完成以上步骤后，您的新lidar匹配算法便可在Apollo系统中生效。"
msgstr ""

