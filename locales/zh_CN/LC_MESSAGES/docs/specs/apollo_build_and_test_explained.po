# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Apollo Auto
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Auto \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-27 10:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../../docs/specs/apollo_build_and_test_explained.md:1
msgid "Apollo Build and Test Explained"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:3
msgid "This document focuses on how to build and test Apollo in different ways."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:5
msgid "Pre-requisites"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:7
msgid ""
"You are supposed to have followed [Apollo Software Installation "
"Guide](../quickstart/apollo_software_installation_guide.md). Make sure "
"you are in Apollo development Docker container before you proceed."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:11
msgid "Overview"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:13
msgid ""
"Apollo uses [Bazel](https://bazel.build) as its underlying build system. "
"Bazel is an open-source build and test tool with a human-readable, high-"
"level build language suitable for medium and large projects. Basically, "
"the better you know about Bazel, the better you know about Apollo Build."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:18
msgid "Building Apollo"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:20
msgid "Subcommands in `apollo.sh`"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:22
msgid "Let's first take a look at the usage of `apollo.sh`."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:24
msgid "![apollo.sh help](images/apollo_sh_help.jpg)"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:24
msgid "apollo.sh help"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:26
msgid ""
"From this message, we can see subcommands that starts with \"build\\_\", "
"like `build_dbg`, `build_cpu`, and `build_opt_gpu`, etc. As you may "
"figure out, they are all variants for their basic form: `apollo.sh "
"build`."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:30
msgid "Building Apollo using `apollo.sh build`"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:32
msgid ""
"You can use `./apollo.sh build` to build individual modules, or the whole"
" Apollo project."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:35
msgid "Type the following command to build, say, Cyber RT:"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:41
msgid ""
"To build the whole Planning module (all "
"[targets](https://docs.bazel.build/versions/master/guide.html#target-"
"patterns) under the `modules/planning` directory):"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:49
msgid "To build everything,"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:55
msgid ""
"![tip_icon](images/tip_icon.png) For simplicty, Apollo 6.0 introduces the"
" notion of `bash apollo.sh build [module]` to replace the notion of "
"`build_cyber`, `build_planning`, etc in previous Apollo releases."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:55
#: ../../../docs/specs/apollo_build_and_test_explained.md:148
#: ../../../docs/specs/apollo_build_and_test_explained.md:152
#: ../../../docs/specs/apollo_build_and_test_explained.md:155
#: ../../../docs/specs/apollo_build_and_test_explained.md:195
msgid "tip_icon"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:59
msgid "Variants of `apollo.sh build`"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:61
msgid ""
"There are mainly four variants of `apollo.sh build`, namely, `build_dbg`,"
" `build_opt`, `build_cpu` and `build_gpu`."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:64
msgid "You may ask, what's the differences among them?"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:66
msgid "Good question. Let me try to make this clear."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:68
msgid "Debug v.s. Optimized Build: `build_dbg/build_opt`"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:70
msgid ""
"By default, Apollo uses the [fastbuild compilation "
"mode](https://docs.bazel.build/versions/master/user-manual.html#flag--"
"compilation_mode) . So when you type `bash apollo.sh build planning`, you"
" are indicating Bazel to run:"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:79
msgid "for you."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:81
msgid "When you type `bash apollo.sh build_dbg planning`, you are running"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:87
msgid ""
"Please note that `--config=dbg` implies `-c dbg`, as can be seen from the"
" following section from `tools/bazelrc`:"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:95
msgid "Now you can understand the `build_opt` variant. Basically,"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:101
msgid "means"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:107
msgid "CPU v.s. GPU Build: `build_cpu/build_gpu`"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:109
msgid ""
"By now, you can easily figure out that `build_cpu` and `build_gpu` are "
"just another form of running"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:116
msgid "and"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:122
msgid "respectively under the hood."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:124
msgid ""
"However, things are a bit complicated compared to the "
"`build_dbg/build_gpu` case."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:127
msgid ""
"Here is a snapshot showing the log messages on my screen when running "
"`apollo.sh build`:"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:130
msgid "![use_gpu build](images/build_use_gpu.png)"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:130
msgid "use_gpu build"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:132
msgid "There are three `USE_GPU`: `USE_GPU_HOST`, `USE_GPU_TARGET` and `USE_GPU`."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:134
msgid ""
"`USE_GPU_HOST` is an environment variable determined by "
"`docker/scripts/dev_start.sh` to pass to Apollo Docker container, which "
"indicates whether the host machine (where Docker is running) is GPU "
"capable."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:137
msgid ""
"`USE_GPU_TARGET` is an environment variable determined by "
"`scripts/apollo.bashrc` inside Docker container to indicate whether the "
"container is GPU capable."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:140
msgid ""
"`USE_GPU` is a variable indicating whether to perform CPU build or GPU "
"build."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:142
msgid ""
"When you type `bash apollo.sh build --config=cpu` or `apollo.sh build "
"--config=gpu`, the [build script](../../scripts/apollo_build.sh) will "
"check the GPU capability of the Docker container and determines whether "
"the build you specified can succeed."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:148
msgid ""
"![tip_icon](images/tip_icon.png) If you didn't specify whether to perform"
" CPU or GPU build, the build script will determine it automatically "
"according to GPU capability of your Docker environment."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:152
msgid ""
"![tip_icon](images/tip_icon.png) It's OK to run CPU build in a **GPU "
"capable** Apollo container, whereas running GPU build in a CPU-only "
"container will fail."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:155
msgid ""
"![tip_icon](images/tip_icon.png) By design, `--config=cpu` and "
"`--config=gpu` are mutually exclusive. You should specify at most one of "
"them when running `apollo.sh build`."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:159
msgid "Optimized GPU Build with `build_opt_gpu`"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:161
msgid "`build_opt_gpu` is just the combination of `build_opt` and `build_gpu`."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:167
msgid "is equivalent to"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:173
msgid "Running Unit Tests: `apollo.sh test`"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:175
msgid ""
"Since `bazel test` inherits all options from `bazel build` (Ref: [Bazel "
"Docs:Test Options](https://docs.bazel.build/versions/master/command-line-"
"reference.html#test-options)), the discussions above are applicable to "
"`apollo.sh test`."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:195
msgid ""
"![tip_icon](images/tip_icon.png) Actually, `apollo.sh test` is equivalent"
" to"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:201
msgid ""
"All the `cpplint` targets was excluded, since there is an independent "
"`apollo.sh lint` command."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:204
msgid "Running Code Coverage using `apollo.sh coverage`"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:206
msgid ""
"Since `bazel coverage` inherits all options from `bazel test`(See [Bazel "
"Docs: Coverage Options](https://docs.bazel.build/versions/master/command-"
"line-reference.html#coverage-options)), all the discussions about "
"`apollo.sh test` applies to `apollo.sh coverage`."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:210
msgid "Build/Test/Coverage: An Insider's View"
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:212
msgid ""
"Under the hood, `apollo.sh build/test/coverage` makes use of "
"[scripts/apollo_build.sh](../../scripts/apollo_build.sh), "
"[scripts/apollo_test.sh](../../scripts/apollo_test.sh), and "
"[scripts/apollo_coverage.sh](../../scripts/apollo_coverage.sh) "
"respectively."
msgstr ""

#: ../../../docs/specs/apollo_build_and_test_explained.md:219
msgid ""
"If you are familiar with Bazel, you can build/test any fine-grained "
"target(s). For example,"
msgstr ""

