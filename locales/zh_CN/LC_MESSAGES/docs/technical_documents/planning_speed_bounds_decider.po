# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the Apollo 文档 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo 文档 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-23 19:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:1
msgid "Planning Speed Bounds Decider Introduction"
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:3
msgid "Introduction"
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:5
msgid ""
"This document describes the process of speed bounds decider. Speed bounds"
" decider contains three main parts: 1.Map obstacles into st graph "
"2.Create speed limit along path 3.Get path_length & time_duration as "
"search bound in st graph. After these three steps, generated st_graph is "
"loaded back to the frame."
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:7
msgid "Where is the code"
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:9
msgid ""
"Please refer "
"[code](https://github.com/ApolloAuto/apollo/blob/master/modules/planning/tasks/deciders/speed_bounds_decider/speed_bounds_decider.cc)"
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:11
msgid "Code Reading"
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:13
msgid "![Diagram](images/planning_speed_bounds_decider.png)"
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:13
msgid "Diagram"
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:15
msgid ""
"SpeedBoundsDecider is a derived class whose base class is Decider. Thus, "
"when task::Execute() is called in the task list, the Process() in "
"SpeedBoundsDecider is actually doing the processing."
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:17
msgid ""
"Input. While the input params of the unified api are frame and "
"reference_line_info, the information needed to caculate st_graph includes"
" PathData/ReferenceLine/PathDecision and PlanningStartPoint from frame."
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:19
msgid "Process."
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:20
msgid ""
"2.1 Map obstacles into st graph `if "
"(boundary_mapper.ComputeSTBoundary(path_decision).code() == "
"ErrorCode::PLANNING_ERROR) {}` Here it goes through every obstacle to "
"generate ST graph. Specifically, this function will fine-tune boundary if"
" longitudinal decision has been made. After that each st_boundary of "
"obstacles is pushed in to a boundaries vector."
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:22
msgid ""
"2.2 Create speed limit along path  `if "
"(!speed_limit_decider.GetSpeedLimits(path_decision->obstacles(), "
"&speed_limit).ok())` Here it goes through every discretized path point "
"and find a speed_limit for it. In every cycle, the basic speed are "
"limited by map/path_curvature/nudge obstacles. For nudge obstacles, each "
"item is went through to find the closest obstacle."
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:24
msgid ""
"2.3 Get path_length and time_duration as search bound in st_graph The "
"time duration is from speed bound config."
msgstr ""

#: ../../docs/technical_documents/planning_speed_bounds_decider.md:26
msgid ""
"Output.  `st_graph_data->LoadData()` The boundaries/speed_limit are "
"stored in st_graph_data of reference_line_info."
msgstr ""

