# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Apollo Auto
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Auto \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-26 14:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../../docker/build/README.md:1
msgid "Apollo Docker Image Build Process"
msgstr ""

#: ../../../docker/build/README.md:3
msgid "Introduction"
msgstr ""

#: ../../../docker/build/README.md:5
msgid ""
"As you may already know, Apollo runs inside Docker container. There are "
"basically two types of Apollo Docker images: CyberRT and Dev. CyberRT "
"images were for developers who want to play with the CyberRT framework "
"only, while Dev images were used to build and run the whole Apollo "
"project."
msgstr ""

#: ../../../docker/build/README.md:10
msgid "Currently, two CPU architectures are supported: `x86_64` and `aarch64`."
msgstr ""

#: ../../../docker/build/README.md:12
msgid "**Note**"
msgstr ""

#: ../../../docker/build/README.md:14
msgid ""
"`dev.aarch64` image was still WIP as of today. It is expected to be ready"
" in the next few months."
msgstr ""

#: ../../../docker/build/README.md:17
msgid ""
"In the section below, I will describe briefly the steps to build these "
"Docker images."
msgstr ""

#: ../../../docker/build/README.md:20
msgid "Build CyberRT Image"
msgstr ""

#: ../../../docker/build/README.md:22
msgid "Type `./build_docker.sh -h` for help message:"
msgstr ""

#: ../../../docker/build/README.md:40
msgid ""
"Here, the `-g/--geo` option is used to enable geo-location based settings"
" (APT & PYPI mirrors, etc.). Two codes (`us` & `cn`) are supported now, "
"and the default is `us`."
msgstr ""

#: ../../../docker/build/README.md:44
msgid "To build the latest CyberRT image, simply run:"
msgstr ""

#: ../../../docker/build/README.md:50
msgid "Users of mainland China can specify `-g cn` to speed up build process:"
msgstr ""

#: ../../../docker/build/README.md:56
msgid "Build Apollo Dev Image"
msgstr ""

#: ../../../docker/build/README.md:58
msgid "Run the following command to build Apollo Dev image:"
msgstr ""

#: ../../../docker/build/README.md:64
msgid ""
"On success, output messages like the following will be shown at the "
"bottom of your screen."
msgstr ""

#: ../../../docker/build/README.md:73
msgid "Build Apollo Runtime Docker Image"
msgstr ""

#: ../../../docker/build/README.md:75
msgid ""
"Apollo Runtime Docker was used in combination with Release Build output "
"for easy deployment. You can run the following commands to build Apollo "
"Runtime Docker image on your own."
msgstr ""

#: ../../../docker/build/README.md:91
msgid ""
"Note: Apollo Runtime Docker supports x86_64 only as Release Build was not"
" ready for Aarch64 yet."
msgstr ""

#: ../../../docker/build/README.md:94
msgid "Tips"
msgstr ""

#: ../../../docker/build/README.md:96
msgid "Build Log"
msgstr ""

#: ../../../docker/build/README.md:98
msgid ""
"The build log for CyberRT and Dev Docker images was located at "
"`/opt/apollo/build.log`, which contains download links and checksums of "
"dependent packages during Docker build."
msgstr ""

#: ../../../docker/build/README.md:102
msgid "Enable Local HTTP Cache to Speed Up Build"
msgstr ""

#: ../../../docker/build/README.md:104
msgid ""
"You can enable local HTTP cache to speed up package downloading by "
"performing the following steps on your **host** running Docker:"
msgstr ""

#: ../../../docker/build/README.md:107
msgid ""
"Download all prerequisite packages to a directory (say, `$HOME/archive`) "
"with URLs listed in the build log. Pay attention to their checksum."
msgstr ""

#: ../../../docker/build/README.md:109
msgid ""
"Change to that archive directory and start your local HTTP cache server "
"at port **8388**."
msgstr ""

#: ../../../docker/build/README.md:117
msgid ""
"Note: Another advantage with the local HTTP cache mechanism is, it has "
"little influence on the final image size. Even if the cached package was "
"missing or broken, it can still be downloaded from the original URL."
msgstr ""

#: ../../../docker/build/README.md:121
msgid "Rerun `build_docker.sh`."
msgstr ""

#: ../../../docker/build/README.md:123
msgid "Add New Installer"
msgstr ""

#: ../../../docker/build/README.md:125
msgid "The best practice of a new installer would be:"
msgstr ""

#: ../../../docker/build/README.md:127
msgid "Well tested."
msgstr ""

#: ../../../docker/build/README.md:129
msgid ""
"Of course. Make it work, and don't break other installers, such as "
"incompatible versions of libraries."
msgstr ""

#: ../../../docker/build/README.md:132
msgid "Standalone."
msgstr ""

#: ../../../docker/build/README.md:134
msgid ""
"Have minimum assumption about the basement, which means, you can depend "
"on the base image and `installers/installer_base.sh`. Other than that, "
"you should install all the dependencies in your own installer."
msgstr ""

#: ../../../docker/build/README.md:138
msgid "Thin."
msgstr ""

#: ../../../docker/build/README.md:140
msgid ""
"It will generate a new layer in the final image, so please keep it as "
"thin as possible. For example, clean up all intermediate files:"
msgstr ""

#: ../../../docker/build/README.md:149
msgid "Cross-architecture."
msgstr ""

#: ../../../docker/build/README.md:151
msgid ""
"It would be awesome to work perfectly for different architectures such as"
" `x86_64` and `aarch64`."
msgstr ""

