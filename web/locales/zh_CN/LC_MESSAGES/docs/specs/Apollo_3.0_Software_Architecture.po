# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Apollo Auto
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Auto \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-26 14:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:1
msgid "Apollo 3.0 Software Architecture"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:3
msgid ""
"Core software modules running on the Apollo 3.0 powered autonomous "
"vehicle include:"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:5
msgid ""
"**Perception** — The perception module identifies the world surrounding "
"the autonomous vehicle. There are two important submodules inside "
"perception: obstacle detection and traffic light detection."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:6
msgid ""
"**Prediction** — The prediction module anticipates the future motion "
"trajectories of the perceived obstacles."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:7
msgid ""
"**Routing** — The routing module tells the autonomous vehicle how to "
"reach its destination via a series of lanes or roads."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:8
msgid ""
"**Planning** — The planning module plans the spatio-temporal trajectory "
"for the autonomous vehicle to take."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:9
msgid ""
"**Control** — The control module executes the planned spatio-temporal "
"trajectory by generating control commands such as throttle, brake, and "
"steering."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:10
msgid ""
"**CanBus** — The CanBus is the interface that passes control commands to "
"the vehicle hardware. It also passes chassis information to the software "
"system."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:11
msgid ""
"**HD-Map** — This module is similar to a library. Instead of publishing "
"and subscribing messages, it frequently functions as query engine support"
" to provide ad-hoc structured information regarding the roads."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:12
msgid ""
"**Localization** — The localization module leverages various information "
"sources such as GPS, LiDAR and IMU to estimate where the autonomous "
"vehicle is located."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:13
msgid ""
"**HMI** - Human Machine Interface or DreamView in Apollo is a module for "
"viewing the status of the vehicle, testing other modules and controlling "
"the functioning of the vehicle in real-time."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:14
msgid ""
"**Monitor** - The surveillance system of all the modules in the vehicle "
"including hardware."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:15
msgid ""
"**Guardian** - A new safety module that performs the function of an "
"Action Center and intervenes should Monitor detect a failure."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:22
msgid "The interactions of these modules are illustrated in the picture below."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:24
msgid "![img](images/Apollo_3.0_SW.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:24
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:43
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:53
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:57
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:63
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:75
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:77
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:83
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:87
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:93
#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:97
msgid "img"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:26
msgid ""
"Every module is running as a separate CarOS-based ROS node. Each module "
"node publishes and subscribes certain topics. The subscribed topics serve"
" as data input while the published topics serve as data output. The "
"detailed interactions are described in the following sections."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:28
msgid "Perception"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:30
msgid ""
"Perception depends on the raw sensor data such as LiDAR point cloud data "
"and camera data. In addition to these raw sensor data inputs, traffic "
"light detection also depends on the localization data as well as the HD-"
"Map. Because real-time ad-hoc traffic light detection is computationally "
"infeasible,  traffic light detection needs localization to determine when"
" and where to start detecting traffic lights through the camera captured "
"pictures. Changes to Apollo 3.0:"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:32
msgid "CIPV detection/ Tailgating – moving within a single lane"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:33
msgid ""
"Whole lane line support - bold line support for long range accuracy. "
"There are 2 different types on installations for Camera, low and high "
"installation."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:34
msgid ""
"Asynchronous sensor fusion – get all the information and get data points "
"by asynchronously fusing LiDAR, Radar and Camera data. This is "
"specifically important because of the frame rate differences in the "
"different sensors – Radar is 10ms, Camera is 33ms and LiDAR is 100ms"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:35
msgid ""
"Online pose estimation – determines angle change and estimates it when "
"there are bumps or slopes to ensure that the sensors move with the car "
"and the angle/pose changes accordingly"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:36
msgid ""
"Visual localization – we now use camera for localization. This "
"functionality is currently being tested."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:37
msgid ""
"Ultrasonic Sensor – Currently being tested as the final gatekeeper to be "
"used in conjunction with Guardian for Automated Emergency brake and "
"vertical/perpendicular parking."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:39
msgid "Prediction"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:41
msgid ""
"The prediction module estimates the future motion trajectories for all "
"the perceived obstacles. The output prediction message wraps the "
"perception information. Prediction subscribes to both localization and "
"perception obstacle messages as shown below."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:43
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/prediction.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:45
msgid ""
"When a localization update is received, the prediction module updates its"
" internal status. The actual prediction is triggered when perception "
"sends out its published perception obstacle message."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:47
msgid "Localization"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:49
msgid ""
"The localization module aggregates various data to locate the autonomous "
"vehicle. There are two types of localization modes: OnTimer and Multiple "
"SensorFusion."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:51
msgid ""
"The first localization method is RTK-based, with a timer-based callback "
"function `OnTimer`, as shown below."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:53
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/localization.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:55
msgid ""
"The other localization method is the Multiple Sensor Fusion (MSF) method,"
" where a bunch of event-triggered callback functions are registered, as "
"shown  below."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:57
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/localization_2.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:59
msgid "Routing"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:61
msgid ""
"The routing module needs to know the routing start point and routing end "
"point, to compute the passage lanes and roads. Usually the routing start "
"point is the autonomous vehicle location. The important data interface is"
" an event triggered function called `OnRoutingRequest`, in which "
"`RoutingResponse` is computed and published as shown below."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:63
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/routing.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:65
msgid "Planning"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:67
msgid ""
"Apollo 2.0 uses several information sources to plan a safe and collision "
"free trajectory, so the planning module interacts with almost every other"
" module."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:69
msgid ""
"Initially, the planning module takes the prediction output. Because the "
"prediction output wraps the original perceived obstacle, the planning "
"module subscribes to the traffic light detection output rather than the "
"perception obstacles output."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:71
msgid ""
"Then, the planning module takes the routing output. Under certain "
"scenarios, the planning module might also trigger a new routing "
"computation by sending a routing request if the current route cannot be "
"faithfully followed."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:73
msgid ""
"Finally, the planning module needs to know the location (Localization: "
"where I am) as well as the current autonomous vehicle information "
"(Chassis: what is my status).  The planning module is also triggered by a"
" fixed frequency, and the main data interface is the `OnTimer` callback "
"function that invokes the `RunOnce` function."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:75
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/planning_1.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:77
msgid ""
"The data dependencies such as chassis, localization, traffic light, and "
"prediction are managed through the `AdapterManager` class. The core "
"software modules are similarly managed.  For example, localization is "
"managed through `AdapterManager::GetLocalization()` as shown "
"below.![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/planning_2.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:79
msgid "Control"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:81
msgid ""
"As described in the planning module, control takes the planned trajectory"
" as input, and generates the control command to pass to CanBus.  It has "
"three main data interfaces: OnPad, OnMonitor, and OnTimer."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:83
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/control_1.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:85
msgid ""
"The `OnPad` and `OnMonitor` are routine interactions with the PAD-based "
"human interface and simulations. The main data interface is the `OnTimer`"
" interface, which periodically produces the actual control commands as "
"shown below."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:87
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/control_2.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:89
msgid "CanBus"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:91
msgid "The CanBus has two data interfaces as shown below."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:93
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/canbus_1.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:95
msgid ""
"The first data interface is a timer-based publisher with the callback "
"function `OnTimer`. This data interface periodically publishes the "
"chassis information as well as chassis details, if enabled."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:97
msgid "![img](https://github.com/ApolloAuto/apollo/blob/master/docs/specs/images/canbus_2.png)"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:99
msgid ""
"The second data interface is an event-based publisher with a callback "
"function `OnControlCommand`, which is triggered when the CanBus module "
"receives control commands."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:101
msgid "HMI"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:103
msgid ""
"Human Machine Interface or DreamView in Apollo is a web application that:"
"     -\tvisualizes the current output of relevant autonomous driving "
"modules, e.g. planning trajectory, car localization, chassis status, etc."
"     -\tprovides human-machine interface for user to view hardware "
"status, turn on/off of modules, and start the autonomous driving car."
"     -\tprovides debugging tools, such as PnC Monitor to efficiently "
"track module issues."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:108
msgid "Monitor"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:110
msgid ""
"The surveillance system of all the modules in the vehicle including "
"hardware. Monitor receives Data from different modules and passes them on"
" to HMI for the driver to view and ensure that all the modules are "
"working without any issue. In the event of a module or hardware failure, "
"monitor sends an alert to Guardian (new Action Center Module) which then "
"decides on which action needs to be taken to prevent a crash."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:112
msgid "Guardian"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:114
msgid ""
"This new module is basically an action center that takes a decision based"
" on the data that is sent by Monitor. There are 2 main functions of "
"Guardian:"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:115
msgid ""
"All modules working fine - Guardian allows the flow of control to work "
"normally. Control signals are sent to CANBus as if Guardian were not "
"present."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:116
msgid ""
"Module crash is detected by Monitor - if there is a failure detected by "
"Monitor, Guardian will prevent Control signals from reaching CANBus and "
"bring the car to a stop. There are 3 ways in which Guardian decides how "
"to stop the car, and to do so, Guardian turns to the final Gatekeeper, "
"Ultrasonic sensors,"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:117
msgid ""
"If the Ultrasonic sensor is running fine without detecting an obstacle, "
"Guardian will bring the car to a slow stop"
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:118
msgid ""
"If the sensor is not responding, Guardian applies a hard brake to bring "
"the car to an immediate stop."
msgstr ""

#: ../../../docs/specs/Apollo_3.0_Software_Architecture.md:119
msgid ""
"This is a special case, If the HMI informs the driver of an impending "
"crash and the driver does not intervene for 10 seconds, Guardian applies "
"a hard brake to bring the car to an immediate stop."
msgstr ""

