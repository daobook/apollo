# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Apollo Auto
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apollo Auto \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-26 14:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:1
msgid "Apollo 编码最佳实践"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:3
msgid "提交 PR 前记得先在本地通过编译、单元测试和代码检查。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:9
msgid "请写单元测试，并随源文件一起提交。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:17
msgid "一个 Bazel 目标（Target）最多包含一个头文件和一个（`.cc`）源文件。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:39
msgid "可运行 `./apollo.sh format <path/to/BUILD>` 来修复 BUILD 文件的格式问题。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:41
msgid ""
"总体上，Apollo 遵循 [Google "
"C++风格指南](https://google.github.io/styleguide/cppguide.html). "
"通过运行`scripts/clang_format.sh <path/to/cpp/dirs/or/files>` 或 `./apollo.sh "
"format -c <path/to/cpp/dirs/or/files>` 命令可修复 C++代码风格问题。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:47
msgid "确保简单且一致的函数签名。注释中请不要出现中文。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:66
msgid "尽可能使用`const` 修饰变量，函数。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:75
msgid "尽可能使用 C++对应头文件而非 C 语言的头文件。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:77
msgid ""
"如，鼓励使用 `#include <ctime>`, `#include <cmath>`, `#include <cstdio>`, "
"`#include <cstring>` 的写法。请尽量杜绝使用`#include <time.h>`, `#include <math.h>`,"
" `#include <stdio.h>`， `#include <string.h>` 的写法。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:81
msgid "只包含必需的头文件。不多，也不少。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:83
msgid ""
"另外，请注意头文件包含顺序。可运行 `apollo.sh format -c` 或 `scripts/clang_format.sh` "
"来修复头文件顺序问题。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:86
msgid "在 Bazel 目标的`deps`部分，只列出该目标的直接依赖。一般来说，只需要列举出该目 标包含的头文件所在的 Bazel 目标作为依赖项即可。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:89
msgid ""
"举例，假设`sandwich.h`包含`bread.h`，而`bread.h`又包含`flour.h`。由 "
"于`sandwich.h`并不直接包含`flour.h` (毕竟，谁会想在三明治中加面粉呢？） ，BUILD 文件应写作："
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:119
msgid "遵循 DRY（不要重复）的原则。"
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:121
msgid "避免重复的类，函数，常量定义，尽量避免重复的代码块。举例："
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:123
msgid ""
"用完整路径引用某个名字，如 `apollo::common::util::Type`，一次是 OK 的。但如 "
"果要使用两次或者更多次，建议设置一个短别名： `using apollo::common::util::Type;`."
msgstr ""

#: ../../../docs/technical_tutorial/apollo_best_coding_practice_cn.md:127
msgid ""
"用级联的方式访问 Protobuf 中的子字段是 OK 的，如， `a_proto.field_1().field_2().field_3()`,"
" 但如果要访问多次，最好将共同前缀部 分保存为引用： `const auto& field_2 = "
"a_proto.field_1().field_2();`."
msgstr ""

